cmake_minimum_required(VERSION 3.28)

SET(CMAKE_SYSTEM_NAME GENERIC)
SET(CMAKE_SYSTEM_PROCESSOR ARM)
SET(CMAKE_CROSSCOMPILING 1)

SET(OPT_PREFIX "/opt/gcc-arm-none-eabi-10.3-2021.10")
SET(BINUTILS_PATH "${OPT_PREFIX}/bin")

SET(CMAKE_C_COMPILER   "${BINUTILS_PATH}/arm-none-eabi-gcc")
SET(CMAKE_CXX_COMPILER "${BINUTILS_PATH}/arm-none-eabi-g++")
SET(CMAKE_ASM_COMPILER "${BINUTILS_PATH}/arm-none-eabi-as")
#SET(CMAKE_ASM_COMPILER "${CMAKE_C_COMPILER}")

SET(CMAKE_AS      "${BINUTILS_PATH}/arm-none-eabi-as")
SET(CMAKE_AR      "${BINUTILS_PATH}/arm-none-eabi-ar")
SET(CMAKE_LINKER  "${BINUTILS_PATH}/arm-none-eabi-ld")
SET(CMAKE_NM      "${BINUTILS_PATH}/arm-none-eabi-nm")
SET(CMAKE_OBJDUMP "${BINUTILS_PATH}/arm-none-eabi-objdump")
SET(CMAKE_OBJCOPY "${BINUTILS_PATH}/arm-none-eabi-objcopy")
SET(CMAKE_RANLIB  "${BINUTILS_PATH}/arm-none-eabi-gcc-ranlib")

if (${CMAKE_VERSION} VERSION_EQUAL "3.6.0" OR ${CMAKE_VERSION} VERSION_GREATER "3.6")
    set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
else ()
    set(CMAKE_EXE_LINKER_FLAGS_INIT "--specs=nosys.specs")
endif ()

execute_process(COMMAND ${CMAKE_C_COMPILER} -print-sysroot OUTPUT_VARIABLE ARM_GCC_SYSROOT OUTPUT_STRIP_TRAILING_WHITESPACE)
#set(CMAKE_SYSROOT ${ARM_GCC_SYSROOT})

set(CMAKE_FIND_ROOT_PATH ${BINUTILS_PATH})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)


# if(NOT CMAKE_C_COMPILE_OBJECT)
#   message(STATUS ">>>>>>>> Compiler override >>>>>>>>")
#   set(CMAKE_C_COMPILE_OBJECT
#     "<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -obj <OBJECT> -c <SOURCE>")
# endif()


# if(NOT CMAKE_C_LINK_EXECUTABLE)
#   message(STATUS ">>>>>>>> Linker override >>>>>>>>")
#   set(CMAKE_C_LINK_EXECUTABLE
#     "<CMAKE_C_COMPILER> <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -obj <TARGET> <LINK_LIBRARIES>")
# endif()

